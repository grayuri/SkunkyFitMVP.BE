import { Response } from "express";
import { IDiet } from "../interfaces/entities/IDiet";
import { ITrainingPlan } from "../interfaces/entities/ITrainingPlan";
import pdfmake from "pdfmake"
import getFormatedTime from "../utils/getFormatedTime";
import enumerateValues from "../utils/enumerateValues";

const printer = new pdfmake({
  Roboto: {
    normal: 'node_modules/roboto-font/fonts/Roboto/roboto-regular-webfont.ttf',
    bold: 'node_modules/roboto-font/fonts/Roboto/roboto-medium-webfont.ttf',
    italics: 'node_modules/roboto-font/fonts/Roboto/roboto-italic-webfont.ttf',
    bolditalics: 'node_modules/roboto-font/fonts/Roboto/roboto-mediumitalic-webfont.ttf'
  }
})

export default class SkunkyPDFMaker {
  async createDietDetailedPDF(diet: IDiet, res: Response) {
    const dd = {
      content: [
        {
          svg: `
            <svg height="32" viewBox="0 0 210 32" fill="true" xmlns="http://www.w3.org/2000/svg">
              <rect width="210" height="32" rx="2" fill="#83B120"/>
              <path d="M74.292 22.662C72.792 22.662 71.622 22.326 70.782 21.654C69.942 20.982 69.462 19.998 69.342 18.702L71.538 18.378C71.754 19.914 72.708 20.682 74.4 20.682C75.132 20.682 75.702 20.538 76.11 20.25C76.518 19.95 76.722 19.536 76.722 19.008C76.722 18.528 76.518 18.168 76.11 17.928C75.702 17.676 75.048 17.442 74.148 17.226C73.308 17.022 72.588 16.782 71.988 16.506C71.388 16.218 70.926 15.834 70.602 15.354C70.29 14.874 70.134 14.238 70.134 13.446C70.134 12.69 70.326 12.018 70.71 11.43C71.106 10.842 71.646 10.38 72.33 10.044C73.014 9.708 73.806 9.54 74.706 9.54C75.894 9.54 76.866 9.852 77.622 10.476C78.378 11.1 78.822 11.958 78.954 13.05L76.902 13.392C76.65 12.144 75.882 11.52 74.598 11.52C73.974 11.52 73.464 11.682 73.068 12.006C72.684 12.33 72.492 12.756 72.492 13.284C72.492 13.812 72.684 14.22 73.068 14.508C73.452 14.784 74.106 15.03 75.03 15.246C75.858 15.438 76.572 15.666 77.172 15.93C77.772 16.182 78.234 16.536 78.558 16.992C78.894 17.448 79.062 18.072 79.062 18.864C79.062 19.608 78.858 20.268 78.45 20.844C78.054 21.408 77.496 21.852 76.776 22.176C76.068 22.5 75.24 22.662 74.292 22.662ZM80.8609 22.5V9.72H83.2009V15.426L88.5109 9.72H91.3549L85.3429 16.092C85.8469 16.356 86.2789 16.776 86.6389 17.352L88.0789 19.584C88.3309 19.968 88.5769 20.232 88.8169 20.376C89.0569 20.52 89.3569 20.592 89.7169 20.592C90.1489 20.592 90.5269 20.484 90.8509 20.268L91.3909 22.086C91.1629 22.266 90.8689 22.404 90.5089 22.5C90.1609 22.608 89.7949 22.662 89.4109 22.662C88.0549 22.662 86.9989 22.068 86.2429 20.88L84.3889 18.036C84.2209 17.784 84.0469 17.592 83.8669 17.46C83.6989 17.316 83.4769 17.214 83.2009 17.154V22.5H80.8609ZM100.431 9.72H102.753L102.771 16.524C102.783 17.796 102.573 18.894 102.141 19.818C101.721 20.73 101.103 21.432 100.287 21.924C99.4831 22.416 98.5111 22.662 97.3711 22.662C95.5471 22.662 94.1731 22.206 93.2491 21.294C92.3371 20.37 91.8811 18.966 91.8811 17.082V9.72H94.2211V16.902C94.2211 18.186 94.4791 19.116 94.9951 19.692C95.5231 20.268 96.3031 20.556 97.3351 20.556C98.3791 20.556 99.1591 20.22 99.6751 19.548C100.203 18.876 100.461 17.832 100.449 16.416L100.431 9.72ZM113.753 9.72H116.003V22.5H113.951L107.597 13.59V22.5H105.347V9.72H107.399L113.753 18.63V9.72ZM118.636 22.5V9.72H120.976V15.426L126.286 9.72H129.13L123.118 16.092C123.622 16.356 124.054 16.776 124.414 17.352L125.854 19.584C126.106 19.968 126.352 20.232 126.592 20.376C126.832 20.52 127.132 20.592 127.492 20.592C127.924 20.592 128.302 20.484 128.626 20.268L129.166 22.086C128.938 22.266 128.644 22.404 128.284 22.5C127.936 22.608 127.57 22.662 127.186 22.662C125.83 22.662 124.774 22.068 124.018 20.88L122.164 18.036C121.996 17.784 121.822 17.592 121.642 17.46C121.474 17.316 121.252 17.214 120.976 17.154V22.5H118.636ZM140.536 9.72L136.072 16.776V22.5H133.714V16.83L129.124 9.72H131.77L134.992 14.742L138.088 9.72H140.536Z" fill="white"/>
            </svg>
          `,
          width: 510
        },
        {
          text: diet.name,
          style: "dietName"
        },
        {
          stack: [
            {
              text: [
                { text: `| ${diet.carbs.toFixed(2)}g `, bold: true, color: "#2051B0" },
                "of Carbs"
              ]
            },
            {
              text: [
                { text: `| ${diet.protein.toFixed(2)}g `, bold: true, color: "#FB771C" },
                "of Protein"
              ]
            },
            {
              text: [
                { text: `| ${diet.fat.toFixed(2)}g `, bold: true, color: "#F8BC37" },
                "of Fat"
              ]
            },
            {
              text: [
                { text: `| ${diet.calories.toFixed(2)} `, bold: true, color: "#367BF7" },
                "of Calories"
              ]
            },
          ],
          marginTop: 6,
          marginBottom: 6,
          fontSize: 16,
          color: "#686867"
        },
        ...diet.meals.map(meal => ({
          stack: [
            {
              text: meal.name,
              style: "mealName",
            },
            {
              stack: [
                {
                  text: [
                    { text: `| ${meal.carbs.toFixed(2)}g `, bold: true, color: "#2051B0" },
                    "of Carbs"
                  ]
                },
                {
                  text: [
                    { text: `| ${meal.protein.toFixed(2)}g `, bold: true, color: "#FB771C" },
                    "of Protein"
                  ]
                },
                {
                  text: [
                    { text: `| ${meal.fat.toFixed(2)}g `, bold: true, color: "#F8BC37" },
                    "of Fat"
                  ]
                },
                {
                  text: [
                    { text: `| ${meal.calories.toFixed(2)} `, bold: true, color: "#367BF7" },
                    "of Calories"
                  ]
                },
              ],
              marginBottom: 12,
              fontSize: 16,
              color: "#686867"
            },
            ...meal.foods.map(food => ({
              stack: [
                {
                  text: [
                    { text: `.${food.servingSizeGrams}g - `, bold: true, color: "#83B120" },
                    food.name
                  ],
                  style: "food",
                },
                {
                  stack: [
                    {
                      text: [
                        { text: `| ${food.carbs.toFixed(2)}g `, bold: true, color: "#2051B0" },
                        "of Carbs"
                      ]
                    },
                    {
                      text: [
                        { text: `| ${food.protein.toFixed(2)}g `, bold: true, color: "#FB771C" },
                        "of Protein"
                      ]
                    },
                    {
                      text: [
                        { text: `| ${food.fat.toFixed(2)}g `, bold: true, color: "#F8BC37" },
                        "of Fat"
                      ]
                    },
                    {
                      text: [
                        { text: `| ${food.calories.toFixed(2)} `, bold: true, color: "#367BF7" },
                        "of Calories"
                      ]
                    },
                  ],
                  marginTop: 6,
                  marginBottom: 12,
                  fontSize: 16,
                  color: "#686867"
                },
              ]
            }))
          ]
        })),
      ],
      styles: {
        dietName: {
          bold: true,
          fontSize: 32,
          marginTop: 24,
          color: "#83B120"
        },
        mealName: {
          marginTop: 12,
          marginBottom: 6,
          fontSize: 24,
          bold: true,
          color: "#B5E056"
        },
        food: {
          fontSize: 16,
          color: "#686867"
        }
      }

    }

    const pdfDoc = printer.createPdfKitDocument(dd)

    res.setHeader("Content-Type", "application/pdf")
    res.setHeader("Content-Disposition", `attachment; filename=${diet.slug}.pdf`)

    pdfDoc.pipe(res)
    pdfDoc.end()
  }

  async createDietSimplifiedPDF(diet: IDiet, res: Response) {
    const dd = {
      content: [
        {
          svg: `
            <svg height="32" viewBox="0 0 210 32" fill="true" xmlns="http://www.w3.org/2000/svg">
              <rect width="210" height="32" rx="2" fill="#83B120"/>
              <path d="M74.292 22.662C72.792 22.662 71.622 22.326 70.782 21.654C69.942 20.982 69.462 19.998 69.342 18.702L71.538 18.378C71.754 19.914 72.708 20.682 74.4 20.682C75.132 20.682 75.702 20.538 76.11 20.25C76.518 19.95 76.722 19.536 76.722 19.008C76.722 18.528 76.518 18.168 76.11 17.928C75.702 17.676 75.048 17.442 74.148 17.226C73.308 17.022 72.588 16.782 71.988 16.506C71.388 16.218 70.926 15.834 70.602 15.354C70.29 14.874 70.134 14.238 70.134 13.446C70.134 12.69 70.326 12.018 70.71 11.43C71.106 10.842 71.646 10.38 72.33 10.044C73.014 9.708 73.806 9.54 74.706 9.54C75.894 9.54 76.866 9.852 77.622 10.476C78.378 11.1 78.822 11.958 78.954 13.05L76.902 13.392C76.65 12.144 75.882 11.52 74.598 11.52C73.974 11.52 73.464 11.682 73.068 12.006C72.684 12.33 72.492 12.756 72.492 13.284C72.492 13.812 72.684 14.22 73.068 14.508C73.452 14.784 74.106 15.03 75.03 15.246C75.858 15.438 76.572 15.666 77.172 15.93C77.772 16.182 78.234 16.536 78.558 16.992C78.894 17.448 79.062 18.072 79.062 18.864C79.062 19.608 78.858 20.268 78.45 20.844C78.054 21.408 77.496 21.852 76.776 22.176C76.068 22.5 75.24 22.662 74.292 22.662ZM80.8609 22.5V9.72H83.2009V15.426L88.5109 9.72H91.3549L85.3429 16.092C85.8469 16.356 86.2789 16.776 86.6389 17.352L88.0789 19.584C88.3309 19.968 88.5769 20.232 88.8169 20.376C89.0569 20.52 89.3569 20.592 89.7169 20.592C90.1489 20.592 90.5269 20.484 90.8509 20.268L91.3909 22.086C91.1629 22.266 90.8689 22.404 90.5089 22.5C90.1609 22.608 89.7949 22.662 89.4109 22.662C88.0549 22.662 86.9989 22.068 86.2429 20.88L84.3889 18.036C84.2209 17.784 84.0469 17.592 83.8669 17.46C83.6989 17.316 83.4769 17.214 83.2009 17.154V22.5H80.8609ZM100.431 9.72H102.753L102.771 16.524C102.783 17.796 102.573 18.894 102.141 19.818C101.721 20.73 101.103 21.432 100.287 21.924C99.4831 22.416 98.5111 22.662 97.3711 22.662C95.5471 22.662 94.1731 22.206 93.2491 21.294C92.3371 20.37 91.8811 18.966 91.8811 17.082V9.72H94.2211V16.902C94.2211 18.186 94.4791 19.116 94.9951 19.692C95.5231 20.268 96.3031 20.556 97.3351 20.556C98.3791 20.556 99.1591 20.22 99.6751 19.548C100.203 18.876 100.461 17.832 100.449 16.416L100.431 9.72ZM113.753 9.72H116.003V22.5H113.951L107.597 13.59V22.5H105.347V9.72H107.399L113.753 18.63V9.72ZM118.636 22.5V9.72H120.976V15.426L126.286 9.72H129.13L123.118 16.092C123.622 16.356 124.054 16.776 124.414 17.352L125.854 19.584C126.106 19.968 126.352 20.232 126.592 20.376C126.832 20.52 127.132 20.592 127.492 20.592C127.924 20.592 128.302 20.484 128.626 20.268L129.166 22.086C128.938 22.266 128.644 22.404 128.284 22.5C127.936 22.608 127.57 22.662 127.186 22.662C125.83 22.662 124.774 22.068 124.018 20.88L122.164 18.036C121.996 17.784 121.822 17.592 121.642 17.46C121.474 17.316 121.252 17.214 120.976 17.154V22.5H118.636ZM140.536 9.72L136.072 16.776V22.5H133.714V16.83L129.124 9.72H131.77L134.992 14.742L138.088 9.72H140.536Z" fill="white"/>
            </svg>
          `,
          width: 510
        },
        {
          text: diet.name,
          style: "dietName"
        },
        ...diet.meals.map(meal => ({
          stack: [
            {
              text: meal.name,
              style: "mealName",
            },
            {
              stack: meal.foods.map(food => ({
                text: [
                  { text: `.${food.servingSizeGrams}g - `, bold: true, color: "#83B120" },
                  food.name
                ],
                style: "food",
              })
              )
            }
          ]
        }))
      ],
      styles: {
        dietName: {
          bold: true,
          fontSize: 32,
          marginTop: 24,
          color: "#83B120"
        },
        mealName: {
          marginTop: 12,
          marginBottom: 6,
          fontSize: 24,
          bold: true,
          color: "#B5E056"
        },
        food: {
          fontSize: 16,
          color: "#686867"
        }
      }
    }

    const pdfDoc = printer.createPdfKitDocument(dd)

    res.setHeader("Content-Type", "application/pdf")
    res.setHeader("Content-Disposition", `attachment; filename=${diet.slug}.pdf`)

    pdfDoc.pipe(res)
    pdfDoc.end()
  }

  async createTrainingPlanPDF(plan: ITrainingPlan, res: Response) {
    const dd = {
      content: [
        {
          svg: `
            <svg height="32" viewBox="0 0 210 32" fill="true" xmlns="http://www.w3.org/2000/svg">
              <rect width="210" height="32" rx="2" fill="#2051B0"/>
              <path d="M74.292 22.662C72.792 22.662 71.622 22.326 70.782 21.654C69.942 20.982 69.462 19.998 69.342 18.702L71.538 18.378C71.754 19.914 72.708 20.682 74.4 20.682C75.132 20.682 75.702 20.538 76.11 20.25C76.518 19.95 76.722 19.536 76.722 19.008C76.722 18.528 76.518 18.168 76.11 17.928C75.702 17.676 75.048 17.442 74.148 17.226C73.308 17.022 72.588 16.782 71.988 16.506C71.388 16.218 70.926 15.834 70.602 15.354C70.29 14.874 70.134 14.238 70.134 13.446C70.134 12.69 70.326 12.018 70.71 11.43C71.106 10.842 71.646 10.38 72.33 10.044C73.014 9.708 73.806 9.54 74.706 9.54C75.894 9.54 76.866 9.852 77.622 10.476C78.378 11.1 78.822 11.958 78.954 13.05L76.902 13.392C76.65 12.144 75.882 11.52 74.598 11.52C73.974 11.52 73.464 11.682 73.068 12.006C72.684 12.33 72.492 12.756 72.492 13.284C72.492 13.812 72.684 14.22 73.068 14.508C73.452 14.784 74.106 15.03 75.03 15.246C75.858 15.438 76.572 15.666 77.172 15.93C77.772 16.182 78.234 16.536 78.558 16.992C78.894 17.448 79.062 18.072 79.062 18.864C79.062 19.608 78.858 20.268 78.45 20.844C78.054 21.408 77.496 21.852 76.776 22.176C76.068 22.5 75.24 22.662 74.292 22.662ZM80.8609 22.5V9.72H83.2009V15.426L88.5109 9.72H91.3549L85.3429 16.092C85.8469 16.356 86.2789 16.776 86.6389 17.352L88.0789 19.584C88.3309 19.968 88.5769 20.232 88.8169 20.376C89.0569 20.52 89.3569 20.592 89.7169 20.592C90.1489 20.592 90.5269 20.484 90.8509 20.268L91.3909 22.086C91.1629 22.266 90.8689 22.404 90.5089 22.5C90.1609 22.608 89.7949 22.662 89.4109 22.662C88.0549 22.662 86.9989 22.068 86.2429 20.88L84.3889 18.036C84.2209 17.784 84.0469 17.592 83.8669 17.46C83.6989 17.316 83.4769 17.214 83.2009 17.154V22.5H80.8609ZM100.431 9.72H102.753L102.771 16.524C102.783 17.796 102.573 18.894 102.141 19.818C101.721 20.73 101.103 21.432 100.287 21.924C99.4831 22.416 98.5111 22.662 97.3711 22.662C95.5471 22.662 94.1731 22.206 93.2491 21.294C92.3371 20.37 91.8811 18.966 91.8811 17.082V9.72H94.2211V16.902C94.2211 18.186 94.4791 19.116 94.9951 19.692C95.5231 20.268 96.3031 20.556 97.3351 20.556C98.3791 20.556 99.1591 20.22 99.6751 19.548C100.203 18.876 100.461 17.832 100.449 16.416L100.431 9.72ZM113.753 9.72H116.003V22.5H113.951L107.597 13.59V22.5H105.347V9.72H107.399L113.753 18.63V9.72ZM118.636 22.5V9.72H120.976V15.426L126.286 9.72H129.13L123.118 16.092C123.622 16.356 124.054 16.776 124.414 17.352L125.854 19.584C126.106 19.968 126.352 20.232 126.592 20.376C126.832 20.52 127.132 20.592 127.492 20.592C127.924 20.592 128.302 20.484 128.626 20.268L129.166 22.086C128.938 22.266 128.644 22.404 128.284 22.5C127.936 22.608 127.57 22.662 127.186 22.662C125.83 22.662 124.774 22.068 124.018 20.88L122.164 18.036C121.996 17.784 121.822 17.592 121.642 17.46C121.474 17.316 121.252 17.214 120.976 17.154V22.5H118.636ZM140.536 9.72L136.072 16.776V22.5H133.714V16.83L129.124 9.72H131.77L134.992 14.742L138.088 9.72H140.536Z" fill="white"/>
            </svg>
          `,
          width: 510
        },
        {
          text: plan.name,
          style: "planName"
        },
        {
          stack: [
            {
              text: [
                { text: `| ${plan.exercisesTotal} `, bold: true, color: "#2051B0" },
                "Exercises"
              ]
            },
            {
              text: [
                { text: `| ${plan.setsTotal} `, bold: true, color: "#2051B0" },
                "Sets"
              ]
            },
            {
              text: [
                { text: `| ${getFormatedTime(plan.timeTotal)} `, bold: true, color: "#2051B0" },
                "of Time"
              ]
            },
            {
              text: [
                { text: `| ${enumerateValues(plan.targetedMuscles)} `, bold: true, color: "#2051B0" },
                "Targeted"
              ]
            },
            {
              text: [
                { text: `| ${plan.burnedCaloriesTotal.toFixed(2)} Kcal `, bold: true, color: "#FB771C" },
                "Burned"
              ]
            },
          ],
          marginTop: 6,
          marginBottom: 6,
          fontSize: 16,
          color: "#686867"
        },
        ...plan.exercises.map((exercise, index) => ({
          stack: [
            {
              text: `${index + 1} - ${exercise.name}`,
              style: "exerciseName",
            },
            {
              stack: [
                {
                  text: [
                    { text: `| ${exercise.sets} `, bold: true, color: "#83B120" },
                    "Sets"
                  ]
                },
                {
                  text: [
                    { text: `| ${exercise.reps} `, bold: true, color: "#E06A56" },
                    "Reps"
                  ]
                },
                {
                  text: [
                    { text: `| ${exercise.restTime}s `, bold: true, color: "#2A65D8" },
                    "of Rest"
                  ]
                }
              ],
              marginBottom: 12,
              fontSize: 16,
              color: "#686867"
            },
          ]
        })),
      ],
      styles: {
        planName: {
          bold: true,
          fontSize: 32,
          marginTop: 24,
          color: "#2051B0"
        },
        exerciseName: {
          marginTop: 12,
          marginBottom: 6,
          fontSize: 24,
          bold: true,
          color: "#5685E0"
        },
      }

    }

    const pdfDoc = printer.createPdfKitDocument(dd)

    res.setHeader("Content-Type", "application/pdf")
    res.setHeader("Content-Disposition", `attachment; filename=${plan.slug}.pdf`)

    pdfDoc.pipe(res)
    pdfDoc.end()
  }
}